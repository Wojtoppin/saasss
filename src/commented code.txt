// Login.js
const [login, setLogin] = useState("user1@example.com")
    const [password, setPassword] = useState("password1")
    // const [login, setLogin] = useState("")
    // const [password, setPassword] = useState("")
    const [message, setMessage] = useState("")

    const sendRequest = async () => {
        // try {
        //   const response = await fetch('https://zienex.pythonanywhere.com/login_user', {
        //     method: 'POST',
        //     headers: {
        //       'Content-Type': 'application/json',
        //     },
        //     body: JSON.stringify({ login: login, password: password }),
        //   });
          
        //   if (response.ok) {
        //     const data = await response.json();
        //     props.setStatus("admin");
        //     // props.setStatus(data["user_status"]);
        //     props.setIsLoggedIn(true);
        //     props.setLoginDisplay(login);
        //     props.setIsLoginVisible(false);
        //     props.setIsUsersDataVisible(true);
        //   } else {
        //     console.error('Request failed with status:', response.status);
        //     setMessage("podany login lub hasło jest nieprawidłowe")

        //   }
        // } catch (error) {
        //   console.error('Error during request:', error);
        //   setMessage("podany login lub hasło jest nieprawidłowe")
        // }
        props.setStatus("admin");
        props.setIsLoggedIn(true);
        props.setLoginDisplay(login);
        props.setIsLoginVisible(false);
        props.setIsUsersDataVisible(true);



      }

// Admin panel
const filterStudents = () =>{
  //   let new_students_displayed = data.filter((student) =>(
  //     (filteredGroup === "none" ? true : student.id_grupy.toString() === filteredGroup.toString())
  //       && student.imie.toLowerCase().includes(filteredName.toLowerCase())
  //         && student.nazwisko.toLowerCase().includes(filteredSurname.toLowerCase())
  //           && student.email.toLowerCase().includes(filteredMail.toLowerCase())
  //             && student.telefon.toLowerCase().includes(filteredNumber.toLowerCase())
  //   ))
  //   setFilteredData(new_students_displayed)
  // }

// useEffect(() => {
  //   filterStudents();
  // }, [filteredName, filteredSurname, filteredMail, filteredNumber, filteredGroup]);

/-head
{/* <th>
                        <Button onClick={reverseIdIndexes}>{filterId === "ASC"? "^": "v"}</Button>
                        
                      </th>
                      <th className="field" style={{minWidth:"40px"}}>
                        <Input id="Imię" required autoComplete="off" type="text" value={filteredName} onChange={(event)=>setFilteredName(event.target.value)}></Input>
                        <label htmlFor="Imię" title="Imię" style={{display:"block", overflow:"hidden"}}></label>
                      </th>
                      <th className="field" style={{minWidth:"40px"}}>
                        <Input id="Nazwisko" required autoComplete="off" type="text" value={filteredSurname} onChange={(event)=>setFilteredSurname(event.target.value)}></Input>
                        <label htmlFor="Nazwisko" title="Nazwisko" style={{display:"block", overflow:"hidden"}}></label>
                      
                      </th>
                      <th style={{minWidth:"40px"}}>
                        <Input type="select" placeholder="id grupy" onChange={(e) => setFilteredGroup(e.target.value)}>
                        <option value={"none"}> wszystkie grupy</option>
                        {Array.from({ length: highestGroup }, (_, index) => (
                          <option key={index + 1} value={index + 1}>
                            grupa {index + 1}
                          </option>
                        ))}
                        </Input>
                      </th>

                      <th className="field" style={{minWidth:"40px"}}>
                        <Input id="email" required autoComplete="off" type="text" value={filteredMail} onChange={(event)=>setFilteredMail(event.target.value)}></Input>
                        <label htmlFor="email" title="email" style={{display:"block", overflow:"hidden"}}></label>                      
                      </th>
                      <th colSpan={2} className="field" style={{minWidth:"100px"}}>
                        <Input id="telefon" required autoComplete="off" type="text" value={filteredNumber} onChange={(event)=>setFilteredNumber(event.target.value)}></Input>
                        <label htmlFor="telefon" title="telefon" style={{display:"block", overflow:"hidden"}}></label>                      
                      </th> */}
/-body
{/* {Array.isArray(filteredData) && filteredData.length !== 0? filteredData.map((student)=>(
                      editedId.toString() === student.id_ucznia.toString()?
                        <tr key={student.id_ucznia}>
                          <td>{student.id_ucznia}</td>
                          <td><Input style={{minWidth:"40px"}} type="text" value={editedName} onChange={(e) => setEditedName(e.target.value)} className="center"></Input></td>
                          <td><Input style={{minWidth:"40px"}} type="text" value={editedSurname} onChange={(e) => setEditedSurname(e.target.value)} className="center"></Input></td>
                          <td><Input type="select" defaultValue={student.id_grupy} onChange={(e) => setEditedGroup(e.target.value)}>
                          {Array.from({ length: highestGroup }, (_, index) => (
                            <option key={index + 1} value={index + 1}>
                              grupa {index + 1}
                            </option>
                          ))}
                          </Input></td>
                          <td><Input style={{minWidth:"40px"}} type="text" value={editedMail} onChange={(e) => setEditedMail(e.target.value)} className="center"></Input></td>
                          <td><Input style={{minWidth:"80px"}} type="text" value={editedNumber} onChange={(e) => setEditedNumber(e.target.value)} className="center" maxLength={11}></Input></td>
                          <td>

                            <Button id="editImageButton" onClick={()=>{setEditedId("none"); sendData(student.data_urodzenia, student.adres_ucznia, student.data_dolaczenia, student.poziom_umiejetnosci, student.uwagi)}}>
                              <img src={process.env.PUBLIC_URL + '/done.png'} id="editImage" alt="done"/>
                            </Button>{" "}

                            <Button id="editImageButton" onClick={()=>setEditedId("none")}><img src={process.env.PUBLIC_URL + '/cancel.png'} id="editImage" alt="cancel"/></Button>
                          </td>
                        </tr>
                        :
                        <tr key={student.id_ucznia}>
                            <td className="clamp">{student.id_ucznia}</td>
                            <td className="clamp">{student.imie}</td>
                            <td className="clamp">{student.nazwisko}</td>
                            <td className="clamp">{student.id_grupy}</td>
                            <td className="clamp" style={{overflowWrap: "break-word"}}>{student.email}</td>
                            <td className="clamp">{student.telefon}</td>
                            <td style={{padding:element>=650?"8px":"0px"}}>
                              {editedId.toString() === "none"?
                                <Button id="editImageButton" style={{padding:element>=650?"8px":"0px"}} onClick={()=>{setEditedId(student.id_ucznia);setEditedValues(student.imie, student.nazwisko, student.email, student.telefon, student.id_grupy)}}><img src={process.env.PUBLIC_URL + '/edit.png'} id="editImage" alt="edit"/></Button>
                                :
                                ""}
                            </td>
                        </tr>
                    
                  )):
                    
                      <tr>
                          <td colSpan={6}>{textIfNoneMatches}</td>
                      </tr>
                } */}

AdminData
// const reverseIdIndexes = () =>{


//   setFilteredData(filteredData.reverse())
  //   setFilteredId(filterId === "ASC"? "DESC": "ASC")
  // }

  // const setEditedValues = (edited_name, edited_surname, edited_mail, edited_number, edited_group) =>{
  //   setEditedName(edited_name)
  //   setEditedSurname(edited_surname)
  //   setEditedMail(edited_mail)
  //   setEditedNumber(edited_number)
  //   setEditedGroup(edited_group)
  // }

  // const sendData = async (data_urodzenia, adres, dataDołączenia, poziomUmiejetnosci, uwagi) =>{
  //   setFilteredData([])
  //   setTextIfNoneMatches(<div style={{width:"100%",display:"flex",justifyContent:"center"}}><div className="loader"></div></div>)
  //   try {
  //     const response = await fetch('https://zienex.pythonanywhere.com/edit_student_data', {
  //       method: 'PATCH',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       body: JSON.stringify({
  //         'id_ucznia': parseInt(editedId,10),
  //         'imie': editedName,
  //         'nazwisko': editedSurname,
  //         'data_urodzenia': data_urodzenia,
  //         'adres_ucznia': adres,
  //         'telefon': editedNumber,
  //         'email': editedMail,
  //         'id_grupy': editedGroup,
  //         'data_dolaczenia': dataDołączenia,
  //         'poziom_umiejetnosci':poziomUmiejetnosci,
  //         'uwagi':uwagi
  //       }),
  //     });

  //     if (!response.ok) {
  //       throw new Error('Request failed');
  //     }else{
  //       // fetchData();
  //     }
  //   } catch (error) {
  //     console.error('Error patching data:', error.message);
  //   }
    

  // }






  // const [filteredData, setFilteredData] = useState([]);

  // // const [filteredName, setFilteredName] = useState("");
  // // const [filteredSurname, setFilteredSurname] = useState("");
  // // const [filteredMail, setFilteredMail] = useState("");
  // // const [filteredNumber, setFilteredNumber] = useState("");
  // // const [filteredGroup, setFilteredGroup] = useState("none");
  // const [filterId, setFilteredId] = useState("ASC");
  
  // const [editedId, setEditedId] = useState("none");
  // const [editedName, setEditedName] = useState("");
  // const [editedSurname, setEditedSurname] = useState("");
  // const [editedMail, setEditedMail] = useState("");
  // const [editedNumber, setEditedNumber] = useState("");
  // const [editedGroup, setEditedGroup] = useState("none");
  // const [textIfNoneMatches, setTextIfNoneMatches] = useState("żaden uczeń nie pasuje do podanych kryterii");
  // const [element, setElement] = useState(850);
  
  

// setFilteredData(responseData);
          // setTextIfNoneMatches("żaden uczeń nie pasuje do podanych kryterii")


Attendance list
  //   const sendData = async (data_urodzenia, adres, dataDołączenia, poziomUmiejetnosci, uwagi) =>{
  //     setFilteredData([])
  //     setTextIfNoneMatches(<div style={{width:"100%",display:"flex",justifyContent:"center"}}><div className="loader"></div></div>)
  //     try {
  //       const response = await fetch('https://zienex.pythonanywhere.com/edit_student_data', {
  //         method: 'PATCH',
  //         headers: {
  //           'Content-Type': 'application/json',
  //         },
  //         body: JSON.stringify({
  //           'id_ucznia': parseInt(editedId,10),
  //           'imie': editedName,
  //           'nazwisko': editedSurname,
  //           'data_urodzenia': data_urodzenia,
  //           'adres_ucznia': adres,
  //           'telefon': editedNumber,
  //           'email': editedMail,
  //           'id_grupy': editedGroup,
  //           'data_dolaczenia': dataDołączenia,
  //           'poziom_umiejetnosci':poziomUmiejetnosci,
  //           'uwagi':uwagi
  //         }),
  //       });

  //       if (!response.ok) {
  //         throw new Error('Request failed');
  //       }else{
  //         // fetchData();
  //       }
  //     } catch (error) {
  //       console.error('Error patching data:', error.message);
  //     }
      

  //   }